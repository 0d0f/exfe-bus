package notifier

import (
	"github.com/stretchrcom/testify/assert"
	"model"
	"testing"
)

func TestUserWelcomeEmail(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = remail1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?V2VsY29tZSB0byBFWEZF?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKV2VsY29tZSB0byBFWEZFISBBbiB1dGlsaXR5IGZvciBoYW5naW5nIG91\r\ndCB3aXRoIGZyaWVuZHMuCgpQbGVhc2UgY2xpY2sgaGVyZSB0byB2ZXJpZnkgeW91ciBpZGVudGl0eTog\r\naHR0cDovL3NpdGUvdXJsLyN0b2tlbj1yZWNpcGllbnRfZW1haWwxX3Rva2VuCgrCt1jCtyhjcm9zcykg\r\naXMgYSBnYXRoZXJpbmcgb2YgcGVvcGxlLCBvbiBwdXJwb3NlIG9yIG5vdC4gV2Ugc2F2ZSB5b3UgZnJv\r\nbSBjYWxsaW5nIHVwIGV2ZXJ5IG9uZSBSU1ZQLCBsb3NpbmcgaW4gZW5kbGVzcyBlbWFpbHMgbWVzc2Fn\r\nZXMgb2ZmIHRoZSBwb2ludC4KCkVYRkUgeW91ciBmcmllbmRzLiBHYXRoZXIgYSDCt1jCtwoK4oCcUm9t\r\nZSB3YXNuJ3QgYnVpbHQgaW4gYSBkYXku4oCdIEVYRkUgW8uIyZtrc2ZpXSBpcyBzdGlsbCBpbiBwaWxv\r\ndCBzdGFnZS4gV2XigJlyZSBidWlsZGluZyB1cCBibG9ja3MsIGNvbnNlcXVlbnRseSBzb21lIGJ1Z3Mg\r\nb3IgdW5maW5pc2hlZCBwYWdlcyBtYXkgaGFwcGVuLiBBbnkgZmVlZGJhY2ssIHBsZWFzZSBlbWFpbCB0\r\nbyBmZWVkYmFja0BleGZlLmNvbS4gTXVjaCBhcHByZWNpYXRlZC4KClRoaXMgaXMgc2VudCB0byBlbWFp\r\nbDFAZG9tYWluLmNvbSBwZXIgaWRlbnRpdHkgcmVnaXN0cmF0aW9uIHJlcXVlc3Qgb24gRVhGRSggaHR0\r\ncDovL3NpdGUvdXJsICku\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMTkxOTE5OyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDEwcHggMjBweCAzMHB4IDIwcHg7\r\nIGJhY2tncm91bmQtY29sb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkIHZhbGlnbj0idG9wIj4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXpl\r\nOiAxOHB4OyBsaW5lLWhlaWdodDogMjRweDsiPgogICAgICAgICAgICAgICAgICAgIEhpLCBlbWFpbDEg\r\nbmFtZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAg\r\nICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMThweDsgbGluZS1oZWlnaHQ6\r\nIDI0cHg7Ij5XZWxjb21lIHRvIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9u\r\nOiBub25lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiE8L3NwYW4+CiAgICAgICAgICAg\r\nICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QW4gdXRpbGl0eSBm\r\nb3IgaGFuZ2luZyBvdXQgd2l0aCBmcmllbmRzLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3A+\r\nCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAg\r\nICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsgY29sb3I6IzMzMzsgIj5QbGVhc2Ug\r\nY2xpY2sgaGVyZSB0byB2ZXJpZnkgeW91ciBpZGVudGl0eTo8L3NwYW4+IDxhIHN0eWxlPSJjb2xvcjoj\r\nMTkxOTE5OyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybC8j\r\ndG9rZW49cmVjaXBpZW50X2VtYWlsMV90b2tlbiI+aHR0cDovL3NpdGUvdXJsLyN0b2tlbj1yZWNpLi4u\r\nPC9hPgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg\r\nICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImNvbG9yOiAj\r\nM2E2ZWE1OyI+wrdYwrc8L3NwYW4+IChjcm9zcykgaXMgYSBnYXRoZXJpbmcgb2YgcGVvcGxlLCBvbiBw\r\ndXJwb3NlIG9yIG5vdC4gV2Ugc2F2ZSB5b3UgZnJvbSBjYWxsaW5nIHVwIGV2ZXJ5IG9uZSBSU1ZQLCBs\r\nb3NpbmcgaW4gZW5kbGVzcyBlbWFpbHMgbWVzc2FnZXMgb2ZmIHRoZSBwb2ludC4KICAgICAgICAgICAg\r\nICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAg\r\nIDxzcGFuIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsiPkVYRkU8L3NwYW4+IHlvdXIgZnJpZW5kcy4gR2F0\r\naGVyIGEgPHNwYW4gc3R5bGU9ImNvbG9yOiAjM2E2ZWE1OyI+wrdYwrc8L3NwYW4+CiAgICAgICAgICAg\r\nICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAg\r\nICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkIGhlaWdodD0iMjAiPjwvdGQ+CiAgICAgICAgICAg\r\nIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAg\r\nICAgICA8aW1nIHN0eWxlPSJmbG9hdDogbGVmdDsgbWFyZ2luLWxlZnQ6IDIwcHg7IG1hcmdpbi1yaWdo\r\ndDogNDBweDsgbWFyZ2luLWJvdHRvbTogMTBweDsiIHNyYz0iaHR0cDovL3NpdGUvaW1nL2VtYWlsL3Jv\r\nbWUucG5nIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJjb2xvcjojMzMzMzMzOyI+CiAg\r\nICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6IDE4cHg7IGxpbmUtaGVpZ2h0\r\nOiAyNHB4OyBtYXJnaW46IDAgMCAyMHB4IDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg4oCc\r\nUm9tZSB3YXNuJ3QgYnVpbHQgaW4gYSBkYXku4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4K\r\nICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9Im1hcmdpbjogMDsiPgogICAgICAgICAgICAg\r\nICAgICAgICAgICA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsi\r\nIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4gW8uIyZtrc2ZpXSBpcyBzdGlsbCBpbiA8c3Bh\r\nbiBzdHlsZSA9ImZvbnQtd2VpZ2h0OiBib2xkOyI+cGlsb3Q8L3NwYW4+IHN0YWdlLiBXZeKAmXJlIGJ1\r\naWxkaW5nIHVwIGJsb2NrcyBvZiBpdCwgY29uc2VxdWVudGx5IHNvbWUgYnVncyBvciB1bmZpbmlzaGVk\r\nIHBhZ2VzIG1heSBoYXBwZW4uIEFueSBmZWVkYmFjaywgcGxlYXNlIGVtYWlsIDxhIHN0eWxlPSJmb250\r\nLXN0eWxlOiBpdGFsaWM7IGNvbG9yOiAjMzMzMzMzOyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsi\r\nIGhyZWY9Im1haWx0bzpmZWVkYmFja0BleGZlLmNvbSI+ZmVlZGJhY2tAZXhmZS5jb208L2E+LiBNdWNo\r\nIGFwcHJlY2lhdGVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAg\r\nICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAg\r\nICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgaGVpZ2h0PSIyMCI+PC90ZD4KICAgICAgICAgICAgPC90\r\ncj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJjb2xvcjogIzY2NjY2\r\nNjsgZm9udC1zaXplOiAxMXB4OyI+CiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyBzZW50IHRvIDxh\r\nIHN0eWxlPSJmb250LXN0eWxlOiBpdGFsaWM7IGNvbG9yOiAjNjY2NjY2OyB0ZXh0LWRlY29yYXRpb246\r\nIG5vbmU7IiBocmVmPSJtYWlsdG86ZW1haWwxQGRvbWFpbi5jb20iPmVtYWlsMUBkb21haW4uY29tPC9h\r\nPiBwZXIgaWRlbnRpdHkgcmVnaXN0cmF0aW9uIHJlcXVlc3Qgb24gPGEgc3R5bGU9ImNvbG9yOiAjM2E2\r\nZWE1OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8vc2l0ZS91cmwiPkVYRkU8L2E+\r\nLgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RhYmxlPgog\r\nICAgPC9ib2R5Pgo8L2h0bWw+Cg==\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserWelcomeTwitter(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = rtwitter1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Welcome to EXFE! An utility for hanging out with friends.Please click here to verify your identity: \\(http://site/url/#token=recipient_twitter1_token\\)"
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?RVhGRSBpZGVudGl0eSB2ZXJpZmljYXRpb24=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKWW91ciBlbWFpbCBlbWFpbDFAZG9tYWluLmNvbSBoYXMgYmVlbiByZXF1\r\nZXN0ZWQgZm9yIHZlcmlmaWNhdGlvbiBieSBTdGV2ZSBFeGZlciBvbiBFWEZFLgoKUGxlYXNlIGNsaWNr\r\nIGhlcmUgdG8gdmVyaWZ5OiBodHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9r\r\nZW4KCkVYRkUgaXMgYSB1dGlsaXR5IGZvciBoYW5naW5nIG91dCB3aXRoIGZyaWVuZHMuIFdlIHNhdmUg\r\neW91IGZyb20gY2FsbGluZyB1cCBldmVyeSBvbmUgUlNWUCwgbG9zaW5nIGluIGVuZGxlc3MgZW1haWxz\r\nIGFuZCBtZXNzYWdlcyBvZmYgdGhlIHBvaW50LgoKVGhpcyBlbWFpbCBpcyBzZW50IHRvIGVtYWlsMUBk\r\nb21haW4uY29tIHBlciBpZGVudGl0eSB2ZXJpZmljYXRpb24gcmVxdWVzdCBvbiBFWEZFKCBodHRwOi8v\r\nc2l0ZS91cmwgKS4=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5lbWFpbDEgbmFtZS48\r\nL3NwYW4+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8\r\ndHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkPgogICAgICAgICAgICAgICAgICAgIFlvdXIgZW1haWwgPGEgaHJlZj0ibWFpbHRvOmVtYWls\r\nMUBkb21haW4uY29tIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyBjb2xvcjogIzMzMzMzMzsg\r\nZm9udC1zdHlsZTogaXRhbGljOyI+ZW1haWwxQGRvbWFpbi5jb208L2E+IGhhcyBiZWVuIHJlcXVlc3Rl\r\nZCBmb3IgdmVyaWZpY2F0aW9uIGJ5IDxzcGFuIHN0eWxlPSJjb2xvcjogIzE5MTkxOTsiPlN0ZXZlIEV4\r\nZmVyPC9zcGFuPiBvbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9u\r\nZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAgICAgICAgICAgICAgICA8L3RkPgog\r\nICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4K\r\nICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxh\r\nIHN0eWxlPSJjb2xvcjojMzMzMzMzOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8v\r\nc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4iPlBsZWFzZSBjbGljayBoZXJlIHRv\r\nIHZlcmlmeTogPHNwYW4gc3R5bGU9InRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyI+aHR0cDovL3Np\r\ndGUvdXJsLyN0b2tlbj1yZWNpLi4uPC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAg\r\nICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48L3RyPgogICAg\r\nICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgPGEgc3R5\r\nbGU9ImNvbG9yOiAjM2E2ZWE1OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8vc2l0\r\nZS91cmwiPkVYRkU8L2E+IGlzIGEgdXRpbGl0eSBmb3IgaGFuZ2luZyBvdXQgd2l0aCBmcmllbmRzLiBX\r\nZSBzYXZlIHlvdSBmcm9tIGNhbGxpbmcgdXAgZXZlcnkgb25lIFJTVlAsIGxvc2luZyBpbiBlbmRsZXNz\r\nIGVtYWlscyBhbmQgbWVzc2FnZXMgb2ZmIHRoZSBwb2ludC4KICAgICAgICAgICAgICAgIDwvdGQ+CiAg\r\nICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSI0MCI+PC90ZD48L3RyPgog\r\nICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImZvbnQtc2l6ZTogMTFweDsg\r\nbGluZS1oZWlnaHQ6IDEzcHg7IGNvbG9yOiAjNjY2NjY2OyI+CiAgICAgICAgICAgICAgICAgICAgVGhp\r\ncyBlbWFpbCBpcyBzZW50IHRvIDxhIHN0eWxlPSJjb2xvcjogIzY2NjY2NjsgdGV4dC1kZWNvcmF0aW9u\r\nOiBub25lOyBmb250LXN0eWxlOiBpdGFsaWM7IiBocmVmPSJtYWlsdG86ZW1haWwxQGRvbWFpbi5jb20i\r\nPmVtYWlsMUBkb21haW4uY29tPC9hPiBwZXIgaWRlbnRpdHkgdmVyaWZpY2F0aW9uIHJlcXVlc3Qgb24g\r\nPGEgc3R5bGU9ImNvbG9yOiAjM2E2ZWE1OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRw\r\nOi8vc2l0ZS91cmwiPkVYRkU8L2E+LgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90\r\ncj4KICAgICAgICA8L3RhYmxlPgogICAgPC9ib2R5Pgo8L2h0bWw+Cg==\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "\\(You(twitter1@domain.com)\\) has been requested for verification by \\(Steve Exfer\\) on EXFE. Please click here to verify: \\(http://site/url/#token=recipient_twitter1_token\\)"
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?RVhGRSByZXNldCBmb3Jnb3R0ZW4gcGFzc3dvcmQ=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIFN0ZXZlIEV4ZmVyLgoKWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIgZm9yZ290dGVu\r\nIEVYRkUgcGFzc3dvcmQuCgpQbGVhc2UgY2xpY2sgaGVyZSB0byBzZXQgbmV3IHBhc3N3b3JkOiBodHRw\r\nOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4gKFRoaXMgc2luZ2xlLXVzZSBs\r\naW5rIHdpbGwgYmUgZXhwaXJlZCBpbiAxIGRheS4pCgpUaGlzIGVtYWlsIGlzIHNlbnQgdG8gZW1haWwx\r\nQGRvbWFpbi5jb20gcGVyIGZvcmdvdCBwYXNzd29yZCByZXF1ZXN0IG9uIEVYRkUoIGh0dHA6Ly9zaXRl\r\nL3VybCApLgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5TdGV2ZSBFeGZlcjwv\r\nc3Bhbj4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0\r\ncj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48L3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAg\r\nICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIg\r\nZm9yZ290dGVuIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIg\r\naHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiBwYXNzd29yZC4KICAgICAgICAgICAgICAgIDwv\r\ndGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48\r\nL3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAg\r\nICAgUGxlYXNlIGNsaWNrIGhlcmUgdG8gc2V0IG5ldyBwYXNzd29yZDogPGEgc3R5bGU9ImNvbG9yOiMz\r\nMzMzMzM7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsLyN0\r\nb2tlbj1yZWNpcGllbnRfZW1haWwxX3Rva2VuIj5odHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2kuLi48\r\nL2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgVGhpcyBzaW5nbGUtdXNlIGxpbmsgd2lsbCBiZSBl\r\neHBpcmVkIGluIDEgZGF5LgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAg\r\nICAgICAgICAgPHRyPjx0ZCBoZWlnaHQ9IjQwIj48L3RkPjwvdHI+CiAgICAgICAgICAgIDx0cj4KICAg\r\nICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZm9udC1zaXplOiAxMXB4OyBsaW5lLWhlaWdodDogMTNweDsg\r\nY29sb3I6ICM2NjY2NjY7Ij4KICAgICAgICAgICAgICAgICAgICBUaGlzIGVtYWlsIGlzIHNlbnQgdG8g\r\nPGEgc3R5bGU9ImNvbG9yOiAjNjY2NjY2OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGZvbnQtc3R5bGU6\r\nIGl0YWxpYzsiIGhyZWY9Im1haWx0bzplbWFpbDFAZG9tYWluLmNvbSI+ZW1haWwxQGRvbWFpbi5jb208\r\nL2E+IHBlciBmb3Jnb3QgcGFzc3dvcmQgcmVxdWVzdCBvbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7\r\nIHRleHQtZGVjb3JhdGlvbjogbm9uZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAg\r\nICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGFibGU+CiAgICA8\r\nL2JvZHk+CjwvaHRtbD4K\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Please click here to set new password: \\(http://site/url/#token=recipient_twitter1_token\\) (This single-use link will be expired in 1 day.)"
	assert.Equal(t, content, expectPrivate)
}
