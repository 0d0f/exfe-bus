package notifier

import (
	"github.com/stretchrcom/testify/assert"
	"model"
	"testing"
)

func TestUserWelcomeEmail(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = remail1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <@test.com>\nSubject: =?utf-8?B?V2VsY29tZSB0byBFWEZF?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKV2VsY29tZSB0byBFWEZFISBBbiB1dGlsaXR5IGZvciBnYXRoZXJpbmcg\r\nd2l0aCBmcmllbmRzLgoKUGxlYXNlIGNsaWNrIGhlcmUgdG8gdmVyaWZ5IHlvdXIgaWRlbnRpdHk6IGh0\r\ndHA6Ly9zaXRlL3VybC8jdG9rZW49cmVjaXBpZW50X2VtYWlsMV90b2tlbgoKwrdYwrcoY3Jvc3MpIGlz\r\nIGEgZ2F0aGVyaW5nIG9mIHBlb3BsZSwgb24gcHVycG9zZSBvciBub3QuIFdlIHNhdmUgeW91IGZyb20g\r\nY2FsbGluZyB1cCBldmVyeSBvbmUgUlNWUCwgbG9zaW5nIGluIGVuZGxlc3MgZW1haWxzIG1lc3NhZ2Vz\r\nIG9mZiB0aGUgcG9pbnQuCgpFWEZFIHlvdXIgZnJpZW5kcy4gR2F0aGVyIGEgwrdYwrcKCuKAnFJvbWUg\r\nd2Fzbid0IGJ1aWx0IGluIGEgZGF5LuKAnSBFWEZFIFvLiMmba3NmaV0gaXMgc3RpbGwgaW4gcGlsb3Qg\r\nc3RhZ2UuIFdl4oCZcmUgYnVpbGRpbmcgdXAgYmxvY2tzLCBjb25zZXF1ZW50bHkgc29tZSBidWdzIG9y\r\nIHVuZmluaXNoZWQgcGFnZXMgbWF5IGhhcHBlbi4gQW55IGZlZWRiYWNrLCBwbGVhc2UgZW1haWwgdG8g\r\nZmVlZGJhY2tAZXhmZS5jb20uIE11Y2ggYXBwcmVjaWF0ZWQuCgpUaGlzIGlzIHNlbnQgdG8gZW1haWwx\r\nQGRvbWFpbi5jb20gcGVyIGlkZW50aXR5IHJlZ2lzdHJhdGlvbiByZXF1ZXN0IG9uIEVYRkUoIGh0dHA6\r\nLy9zaXRlL3VybCApLg==\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMTkxOTE5OyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDEwcHggMjBweCAzMHB4IDIwcHg7\r\nIGJhY2tncm91bmQtY29sb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkIHZhbGlnbj0idG9wIj4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXpl\r\nOiAxOHB4OyBsaW5lLWhlaWdodDogMjRweDsiPgogICAgICAgICAgICAgICAgICAgIEhpLCBlbWFpbDEg\r\nbmFtZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAg\r\nICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMThweDsgbGluZS1oZWlnaHQ6\r\nIDI0cHg7Ij5XZWxjb21lIHRvIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9u\r\nOiBub25lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiE8L3NwYW4+CiAgICAgICAgICAg\r\nICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QW4gdXRpbGl0eSBm\r\nb3IgZ2F0aGVyaW5nIHdpdGggZnJpZW5kcy48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9wPgog\r\nICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAg\r\nICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC1zaXplOjE0cHg7IGNvbG9yOiMzMzM7ICI+UGxlYXNlIGNs\r\naWNrIGhlcmUgdG8gdmVyaWZ5IHlvdXIgaWRlbnRpdHk6PC9zcGFuPiA8YSBzdHlsZT0iY29sb3I6IzE5\r\nMTkxOTsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IiBocmVmPSJodHRwOi8vc2l0ZS91cmwvI3Rv\r\na2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4iPmh0dHA6Ly9zaXRlL3VybC8jdG9rZW49cmVjaS4uLjwv\r\nYT4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg\r\nICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjogIzNh\r\nNmVhNTsiPsK3WMK3PC9zcGFuPiAoY3Jvc3MpIGlzIGEgZ2F0aGVyaW5nIG9mIHBlb3BsZSwgb24gcHVy\r\ncG9zZSBvciBub3QuIFdlIHNhdmUgeW91IGZyb20gY2FsbGluZyB1cCBldmVyeSBvbmUgUlNWUCwgbG9z\r\naW5nIGluIGVuZGxlc3MgZW1haWxzIG1lc3NhZ2VzIG9mZiB0aGUgcG9pbnQuCiAgICAgICAgICAgICAg\r\nICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICA8\r\nc3BhbiBzdHlsZT0iY29sb3I6ICMzYTZlYTU7Ij5FWEZFPC9zcGFuPiB5b3VyIGZyaWVuZHMuIEdhdGhl\r\nciBhIDxzcGFuIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsiPsK3WMK3PC9zcGFuPgogICAgICAgICAgICAg\r\nICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAg\r\nICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZCBoZWlnaHQ9IjIwIj48L3RkPgogICAgICAgICAgICA8\r\nL3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAg\r\nICAgPGltZyBzdHlsZT0iZmxvYXQ6IGxlZnQ7IG1hcmdpbi1sZWZ0OiAyMHB4OyBtYXJnaW4tcmlnaHQ6\r\nIDQwcHg7IG1hcmdpbi1ib3R0b206IDEwcHg7IiBzcmM9Imh0dHA6Ly9zaXRlL2ltZy9lbWFpbC9yb21l\r\nLnBuZyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iY29sb3I6IzMzMzMzMzsiPgogICAg\r\nICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXplOiAxOHB4OyBsaW5lLWhlaWdodDog\r\nMjRweDsgbWFyZ2luOiAwIDAgMjBweCAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKAnFJv\r\nbWUgd2Fzbid0IGJ1aWx0IGluIGEgZGF5LuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAg\r\nICAgICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPSJtYXJnaW46IDA7Ij4KICAgICAgICAgICAgICAg\r\nICAgICAgICAgPGEgc3R5bGU9ImNvbG9yOiAjM2E2ZWE1OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBo\r\ncmVmPSJodHRwOi8vc2l0ZS91cmwiPkVYRkU8L2E+IFvLiMmba3NmaV0gaXMgc3RpbGwgaW4gPHNwYW4g\r\nc3R5bGUgPSJmb250LXdlaWdodDogYm9sZDsiPnBpbG90PC9zcGFuPiBzdGFnZS4gV2XigJlyZSBidWls\r\nZGluZyB1cCBibG9ja3Mgb2YgaXQsIGNvbnNlcXVlbnRseSBzb21lIGJ1Z3Mgb3IgdW5maW5pc2hlZCBw\r\nYWdlcyBtYXkgaGFwcGVuLiBBbnkgZmVlZGJhY2ssIHBsZWFzZSBlbWFpbCA8YSBzdHlsZT0iZm9udC1z\r\ndHlsZTogaXRhbGljOyBjb2xvcjogIzMzMzMzMzsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IiBo\r\ncmVmPSJtYWlsdG86ZmVlZGJhY2tAZXhmZS5jb20iPmZlZWRiYWNrQGV4ZmUuY29tPC9hPi4gTXVjaCBh\r\ncHByZWNpYXRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAg\r\nIDwvZGl2PgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAg\r\nPHRyPgogICAgICAgICAgICAgICAgPHRkIGhlaWdodD0iMjAiPjwvdGQ+CiAgICAgICAgICAgIDwvdHI+\r\nCiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iY29sb3I6ICM2NjY2NjY7\r\nIGZvbnQtc2l6ZTogMTFweDsiPgogICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgc2VudCB0byA8YSBz\r\ndHlsZT0iZm9udC1zdHlsZTogaXRhbGljOyBjb2xvcjogIzY2NjY2NjsgdGV4dC1kZWNvcmF0aW9uOiBu\r\nb25lOyIgaHJlZj0ibWFpbHRvOmVtYWlsMUBkb21haW4uY29tIj5lbWFpbDFAZG9tYWluLmNvbTwvYT4g\r\ncGVyIGlkZW50aXR5IHJlZ2lzdHJhdGlvbiByZXF1ZXN0IG9uIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVh\r\nNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPi4K\r\nICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90YWJsZT4KICAg\r\nIDwvYm9keT4KPC9odG1sPgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserWelcomeTwitter(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = rtwitter1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := ""
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <@test.com>\nSubject: =?utf-8?B?RVhGRSBpZGVudGl0eSB2ZXJpZmljYXRpb24=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKWW91ciBlbWFpbCBlbWFpbDFAZG9tYWluLmNvbSBoYXMgYmVlbiByZXF1\r\nZXN0ZWQgZm9yIHZlcmlmaWNhdGlvbiBieSBTdGV2ZSBFeGZlciBvbiBFWEZFLgoKUGxlYXNlIGNsaWNr\r\nIGhlcmUgdG8gdmVyaWZ5OiBodHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9r\r\nZW4KCkVYRkUgaXMgYSB1dGlsaXR5IGZvciBnYXRoZXJpbmcgd2l0aCBmcmllbmRzLiBXZSBzYXZlIHlv\r\ndSBmcm9tIGNhbGxpbmcgdXAgZXZlcnkgb25lIFJTVlAsIGxvc2luZyBpbiBlbmRsZXNzIGVtYWlscyBh\r\nbmQgbWVzc2FnZXMgb2ZmIHRoZSBwb2ludC4KClRoaXMgZW1haWwgaXMgc2VudCB0byBlbWFpbDFAZG9t\r\nYWluLmNvbSBwZXIgaWRlbnRpdHkgdmVyaWZpY2F0aW9uIHJlcXVlc3Qgb24gRVhGRSggaHR0cDovL3Np\r\ndGUvdXJsICku\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5lbWFpbDEgbmFtZS48\r\nL3NwYW4+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8\r\ndHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkPgogICAgICAgICAgICAgICAgICAgIFlvdXIgZW1haWwgPGEgaHJlZj0ibWFpbHRvOmVtYWls\r\nMUBkb21haW4uY29tIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyBjb2xvcjogIzMzMzMzMzsg\r\nZm9udC1zdHlsZTogaXRhbGljOyI+ZW1haWwxQGRvbWFpbi5jb208L2E+IGhhcyBiZWVuIHJlcXVlc3Rl\r\nZCBmb3IgdmVyaWZpY2F0aW9uIGJ5IDxzcGFuIHN0eWxlPSJjb2xvcjogIzE5MTkxOTsiPlN0ZXZlIEV4\r\nZmVyPC9zcGFuPiBvbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9u\r\nZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAgICAgICAgICAgICAgICA8L3RkPgog\r\nICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4K\r\nICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxh\r\nIHN0eWxlPSJjb2xvcjojMzMzMzMzOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8v\r\nc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4iPlBsZWFzZSBjbGljayBoZXJlIHRv\r\nIHZlcmlmeTogPHNwYW4gc3R5bGU9InRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyI+aHR0cDovL3Np\r\ndGUvdXJsLyN0b2tlbj1yZWNpLi4uPC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAg\r\nICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48L3RyPgogICAg\r\nICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgPGEgc3R5\r\nbGU9ImNvbG9yOiAjM2E2ZWE1OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8vc2l0\r\nZS91cmwiPkVYRkU8L2E+IGlzIGEgdXRpbGl0eSBmb3IgZ2F0aGVyaW5nIHdpdGggZnJpZW5kcy4gV2Ug\r\nc2F2ZSB5b3UgZnJvbSBjYWxsaW5nIHVwIGV2ZXJ5IG9uZSBSU1ZQLCBsb3NpbmcgaW4gZW5kbGVzcyBl\r\nbWFpbHMgYW5kIG1lc3NhZ2VzIG9mZiB0aGUgcG9pbnQuCiAgICAgICAgICAgICAgICA8L3RkPgogICAg\r\nICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGhlaWdodD0iNDAiPjwvdGQ+PC90cj4KICAg\r\nICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJmb250LXNpemU6IDExcHg7IGxp\r\nbmUtaGVpZ2h0OiAxM3B4OyBjb2xvcjogIzY2NjY2NjsiPgogICAgICAgICAgICAgICAgICAgIFRoaXMg\r\nZW1haWwgaXMgc2VudCB0byA8YSBzdHlsZT0iY29sb3I6ICM2NjY2NjY7IHRleHQtZGVjb3JhdGlvbjog\r\nbm9uZTsgZm9udC1zdHlsZTogaXRhbGljOyIgaHJlZj0ibWFpbHRvOmVtYWlsMUBkb21haW4uY29tIj5l\r\nbWFpbDFAZG9tYWluLmNvbTwvYT4gcGVyIGlkZW50aXR5IHZlcmlmaWNhdGlvbiByZXF1ZXN0IG9uIDxh\r\nIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIgaHJlZj0iaHR0cDov\r\nL3NpdGUvdXJsIj5FWEZFPC9hPi4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+\r\nCiAgICAgICAgPC90YWJsZT4KICAgIDwvYm9keT4KPC9odG1sPgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := ""
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <@test.com>\nSubject: =?utf-8?B?RVhGRSByZXNldCBmb3Jnb3R0ZW4gcGFzc3dvcmQ=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIFN0ZXZlIEV4ZmVyLgoKWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIgZm9yZ290dGVu\r\nIEVYRkUgcGFzc3dvcmQuCgpQbGVhc2UgY2xpY2sgaGVyZSB0byBzZXQgbmV3IHBhc3N3b3JkOiBodHRw\r\nOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4gKFRoaXMgc2luZ2xlLXVzZSBs\r\naW5rIHdpbGwgYmUgZXhwaXJlZCBpbiAxIGRheS4pCgpUaGlzIGVtYWlsIGlzIHNlbnQgdG8gZW1haWwx\r\nQGRvbWFpbi5jb20gcGVyIGZvcmdvdCBwYXNzd29yZCByZXF1ZXN0IG9uIEVYRkUoIGh0dHA6Ly9zaXRl\r\nL3VybCApLgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5TdGV2ZSBFeGZlcjwv\r\nc3Bhbj4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0\r\ncj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48L3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAg\r\nICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIg\r\nZm9yZ290dGVuIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIg\r\naHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiBwYXNzd29yZC4KICAgICAgICAgICAgICAgIDwv\r\ndGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48\r\nL3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAg\r\nICAgUGxlYXNlIGNsaWNrIGhlcmUgdG8gc2V0IG5ldyBwYXNzd29yZDogPGEgc3R5bGU9ImNvbG9yOiMz\r\nMzMzMzM7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsLyN0\r\nb2tlbj1yZWNpcGllbnRfZW1haWwxX3Rva2VuIj5odHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2kuLi48\r\nL2E+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgVGhpcyBzaW5nbGUtdXNlIGxpbmsgd2lsbCBiZSBl\r\neHBpcmVkIGluIDEgZGF5LgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAg\r\nICAgICAgICAgPHRyPjx0ZCBoZWlnaHQ9IjQwIj48L3RkPjwvdHI+CiAgICAgICAgICAgIDx0cj4KICAg\r\nICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZm9udC1zaXplOiAxMXB4OyBsaW5lLWhlaWdodDogMTNweDsg\r\nY29sb3I6ICM2NjY2NjY7Ij4KICAgICAgICAgICAgICAgICAgICBUaGlzIGVtYWlsIGlzIHNlbnQgdG8g\r\nPGEgc3R5bGU9ImNvbG9yOiAjNjY2NjY2OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGZvbnQtc3R5bGU6\r\nIGl0YWxpYzsiIGhyZWY9Im1haWx0bzplbWFpbDFAZG9tYWluLmNvbSI+ZW1haWwxQGRvbWFpbi5jb208\r\nL2E+IHBlciBmb3Jnb3QgcGFzc3dvcmQgcmVxdWVzdCBvbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7\r\nIHRleHQtZGVjb3JhdGlvbjogbm9uZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAg\r\nICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGFibGU+CiAgICA8\r\nL2JvZHk+CjwvaHRtbD4K\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := ""
	assert.Equal(t, content, expectPrivate)
}
