package notifier

import (
	"github.com/stretchrcom/testify/assert"
	"model"
	"testing"
)

func TestUserWelcomeEmail(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = remail1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?V2VsY29tZSB0byBFWEZF?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKV2VsY29tZSB0byBFWEZFISBBbiB1dGlsaXR5IGZvciBoYW5naW5nIG91\r\ndCB3aXRoIGZyaWVuZHMuCgpQbGVhc2UgY2xpY2sgaGVyZSB0byB2ZXJpZnkgeW91ciBpZGVudGl0eTog\r\naHR0cDovL3NpdGUvdXJsLyN0b2tlbj1yZWNpcGllbnRfZW1haWwxX3Rva2VuCgrCt1jCtyhjcm9zcykg\r\naXMgYSBnYXRoZXJpbmcgb2YgcGVvcGxlLCBvbiBwdXJwb3NlIG9yIG5vdC4gV2Ugc2F2ZSB5b3UgZnJv\r\nbSBjYWxsaW5nIHVwIGV2ZXJ5IG9uZSBSU1ZQLCBsb3NpbmcgaW4gZW5kbGVzcyBlbWFpbHMgbWVzc2Fn\r\nZXMgb2ZmIHRoZSBwb2ludC4KCkVYRkUgeW91ciBmcmllbmRzLiBHYXRoZXIgYSDCt1jCtwoK4oCcUm9t\r\nZSB3YXNuJ3QgYnVpbHQgaW4gYSBkYXku4oCdIEVYRkUgW8uIyZtrc2ZpXSBpcyBzdGlsbCBpbiBwaWxv\r\ndCBzdGFnZS4gV2XigJlyZSBidWlsZGluZyB1cCBibG9ja3MsIGNvbnNlcXVlbnRseSBzb21lIGJ1Z3Mg\r\nb3IgdW5maW5pc2hlZCBwYWdlcyBtYXkgaGFwcGVuLiBBbnkgZmVlZGJhY2ssIHBsZWFzZSBlbWFpbCB0\r\nbyBmZWVkYmFja0BleGZlLmNvbS4gTXVjaCBhcHByZWNpYXRlZC4KClRoaXMgaXMgc2VudCB0byBlbWFp\r\nbDFAZG9tYWluLmNvbSBwZXIgaWRlbnRpdHkgcmVnaXN0cmF0aW9uIHJlcXVlc3Qgb24gRVhGRSggaHR0\r\ncDovL3NpdGUvdXJsICku\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMTkxOTE5OyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDEwcHggMjBweCAzMHB4IDIwcHg7\r\nIGJhY2tncm91bmQtY29sb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkIHZhbGlnbj0idG9wIj4KICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0iZm9udC1zaXpl\r\nOiAxOHB4OyBsaW5lLWhlaWdodDogMjRweDsiPgogICAgICAgICAgICAgICAgICAgIEhpLCBlbWFpbDEg\r\nbmFtZQogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAg\r\nICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtc2l6ZTogMThweDsgbGluZS1oZWlnaHQ6\r\nIDI0cHg7Ij5XZWxjb21lIHRvIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9u\r\nOiBub25lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiE8L3NwYW4+CiAgICAgICAgICAg\r\nICAgICAgICAgICAgIDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QW4gdXRpbGl0eSBm\r\nb3IgaGFuZ2luZyBvdXQgd2l0aCBmcmllbmRzLjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3A+\r\nCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAg\r\nICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsgY29sb3I6IzMzMzsgIj5QbGVhc2Ug\r\nY2xpY2sgaGVyZSB0byB2ZXJpZnkgeW91ciBpZGVudGl0eTo8L3NwYW4+IDxhIHN0eWxlPSJjb2xvcjoj\r\nMTkxOTE5OyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybC8j\r\ndG9rZW49cmVjaXBpZW50X2VtYWlsMV90b2tlbiI+aHR0cDovL3NpdGUvdXJsLyN0b2tlbj1yZWNpcGni\r\ngKY8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIAogICAgICAg\r\nICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY29sb3I6\r\nICMzYTZlYTU7Ij7Ct1jCtzwvc3Bhbj4gKGNyb3NzKSBpcyBhIGdhdGhlcmluZyBvZiBwZW9wbGUsIG9u\r\nIHB1cnBvc2Ugb3Igbm90LiBXZSBzYXZlIHlvdSBmcm9tIGNhbGxpbmcgdXAgZXZlcnkgb25lIFJTVlAs\r\nIGxvc2luZyBpbiBlbmRsZXNzIGVtYWlscyBtZXNzYWdlcyBvZmYgdGhlIHBvaW50LgogICAgICAgICAg\r\nICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAg\r\nICAgPHNwYW4gc3R5bGU9ImNvbG9yOiAjM2E2ZWE1OyI+RVhGRTwvc3Bhbj4geW91ciBmcmllbmRzLiBH\r\nYXRoZXIgYSA8c3BhbiBzdHlsZT0iY29sb3I6ICMzYTZlYTU7Ij7Ct1jCtzwvc3Bhbj4KICAgICAgICAg\r\nICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAg\r\nICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgaGVpZ2h0PSIyMCI+PC90ZD4KICAgICAgICAg\r\nICAgPC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAg\r\nICAgICAgIDxpbWcgc3R5bGU9ImZsb2F0OiBsZWZ0OyBtYXJnaW4tbGVmdDogMjBweDsgbWFyZ2luLXJp\r\nZ2h0OiA0MHB4OyBtYXJnaW4tYm90dG9tOiAxMHB4OyIgc3JjPSJodHRwOi8vc2l0ZS9pbWcvZW1haWwv\r\ncm9tZS5wbmciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImNvbG9yOiMzMzMzMzM7Ij4K\r\nICAgICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImZvbnQtc2l6ZTogMThweDsgbGluZS1oZWln\r\naHQ6IDI0cHg7IG1hcmdpbjogMCAwIDIwcHggMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDi\r\ngJxSb21lIHdhc24ndCBidWlsdCBpbiBhIGRheS7igJ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9w\r\nPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT0ibWFyZ2luOiAwOyI+CiAgICAgICAgICAg\r\nICAgICAgICAgICAgIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9uOiBub25l\r\nOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiBby4jJm2tzZmldIGlzIHN0aWxsIGluIDxz\r\ncGFuIHN0eWxlID0iZm9udC13ZWlnaHQ6IGJvbGQ7Ij5waWxvdDwvc3Bhbj4gc3RhZ2UuIFdl4oCZcmUg\r\nYnVpbGRpbmcgdXAgYmxvY2tzIG9mIGl0LCBjb25zZXF1ZW50bHkgc29tZSBidWdzIG9yIHVuZmluaXNo\r\nZWQgcGFnZXMgbWF5IGhhcHBlbi4gQW55IGZlZWRiYWNrLCBwbGVhc2UgZW1haWwgPGEgc3R5bGU9ImZv\r\nbnQtc3R5bGU6IGl0YWxpYzsgY29sb3I6ICMzMzMzMzM7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5l\r\nOyIgaHJlZj0ibWFpbHRvOmZlZWRiYWNrQGV4ZmUuY29tIj5mZWVkYmFja0BleGZlLmNvbTwvYT4uIE11\r\nY2ggYXBwcmVjaWF0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAg\r\nICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAg\r\nICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZCBoZWlnaHQ9IjIwIj48L3RkPgogICAgICAgICAgICA8\r\nL3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9ImNvbG9yOiAjNjY2\r\nNjY2OyBmb250LXNpemU6IDExcHg7Ij4KICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHNlbnQgdG8g\r\nPGEgc3R5bGU9ImZvbnQtc3R5bGU6IGl0YWxpYzsgY29sb3I6ICM2NjY2NjY7IHRleHQtZGVjb3JhdGlv\r\nbjogbm9uZTsiIGhyZWY9Im1haWx0bzplbWFpbDFAZG9tYWluLmNvbSI+ZW1haWwxQGRvbWFpbi5jb208\r\nL2E+IHBlciBpZGVudGl0eSByZWdpc3RyYXRpb24gcmVxdWVzdCBvbiA8YSBzdHlsZT0iY29sb3I6ICMz\r\nYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwv\r\nYT4uCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGFibGU+\r\nCiAgICA8L2JvZHk+CjwvaHRtbD4K\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserWelcomeTwitter(t *testing.T) {
	arg := model.UserWelcome{}
	arg.To = rtwitter1
	arg.NeedVerify = true

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_welcome", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Welcome to EXFE! An utility for hanging out with friends.Please click here to verify your identity: \\(http://site/url/#token=recipient_twitter1_token\\)"
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?RVhGRSBpZGVudGl0eSB2ZXJpZmljYXRpb24=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIGVtYWlsMSBuYW1lLgoKWW91ciBlbWFpbCBlbWFpbDFAZG9tYWluLmNvbSBoYXMgYmVlbiByZXF1\r\nZXN0ZWQgZm9yIHZlcmlmaWNhdGlvbiBieSBTdGV2ZSBFeGZlciBvbiBFWEZFLgoKUGxlYXNlIGNsaWNr\r\nIGhlcmUgdG8gdmVyaWZ5OiBodHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9r\r\nZW4KCkVYRkUgaXMgYSB1dGlsaXR5IGZvciBoYW5naW5nIG91dCB3aXRoIGZyaWVuZHMuIFdlIHNhdmUg\r\neW91IGZyb20gY2FsbGluZyB1cCBldmVyeSBvbmUgUlNWUCwgbG9zaW5nIGluIGVuZGxlc3MgZW1haWxz\r\nIGFuZCBtZXNzYWdlcyBvZmYgdGhlIHBvaW50LgoKVGhpcyBlbWFpbCBpcyBzZW50IHRvIGVtYWlsMUBk\r\nb21haW4uY29tIHBlciBpZGVudGl0eSB2ZXJpZmljYXRpb24gcmVxdWVzdCBvbiBFWEZFKCBodHRwOi8v\r\nc2l0ZS91cmwgKS4=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5lbWFpbDEgbmFtZS48\r\nL3NwYW4+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8\r\ndHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAg\r\nICAgPHRkPgogICAgICAgICAgICAgICAgICAgIFlvdXIgZW1haWwgPGEgaHJlZj0ibWFpbHRvOmVtYWls\r\nMUBkb21haW4uY29tIiBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOiBub25lOyBjb2xvcjogIzMzMzMzMzsg\r\nZm9udC1zdHlsZTogaXRhbGljOyI+ZW1haWwxQGRvbWFpbi5jb208L2E+IGhhcyBiZWVuIHJlcXVlc3Rl\r\nZCBmb3IgdmVyaWZpY2F0aW9uIGJ5IDxzcGFuIHN0eWxlPSJjb2xvcjogIzE5MTkxOTsiPlN0ZXZlIEV4\r\nZmVyPC9zcGFuPiBvbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9u\r\nZTsiIGhyZWY9Imh0dHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAgICAgICAgICAgICAgICA8L3RkPgog\r\nICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+PHRkIGhlaWdodD0iMjAiPjwvdGQ+PC90cj4K\r\nICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxh\r\nIHN0eWxlPSJjb2xvcjojMzMzMzMzOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IiBocmVmPSJodHRwOi8v\r\nc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4iPlBsZWFzZSBjbGljayBoZXJlIHRv\r\nIHZlcmlmeTogPHNwYW4gc3R5bGU9InRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyI+aHR0cDovL3Np\r\ndGUvdXJsLyN0b2tlbj1yZWNpcGnigKY8L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAg\r\nICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBoZWlnaHQ9IjIwIj48L3RkPjwvdHI+CiAg\r\nICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICA8YSBz\r\ndHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsiIGhyZWY9Imh0dHA6Ly9z\r\naXRlL3VybCI+RVhGRTwvYT4gaXMgYSB1dGlsaXR5IGZvciBoYW5naW5nIG91dCB3aXRoIGZyaWVuZHMu\r\nIFdlIHNhdmUgeW91IGZyb20gY2FsbGluZyB1cCBldmVyeSBvbmUgUlNWUCwgbG9zaW5nIGluIGVuZGxl\r\nc3MgZW1haWxzIGFuZCBtZXNzYWdlcyBvZmYgdGhlIHBvaW50LgogICAgICAgICAgICAgICAgPC90ZD4K\r\nICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPHRyPjx0ZCBoZWlnaHQ9IjQwIj48L3RkPjwvdHI+\r\nCiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0iZm9udC1zaXplOiAxMXB4\r\nOyBsaW5lLWhlaWdodDogMTNweDsgY29sb3I6ICM2NjY2NjY7Ij4KICAgICAgICAgICAgICAgICAgICBU\r\naGlzIGVtYWlsIGlzIHNlbnQgdG8gPGEgc3R5bGU9ImNvbG9yOiAjNjY2NjY2OyB0ZXh0LWRlY29yYXRp\r\nb246IG5vbmU7IGZvbnQtc3R5bGU6IGl0YWxpYzsiIGhyZWY9Im1haWx0bzplbWFpbDFAZG9tYWluLmNv\r\nbSI+ZW1haWwxQGRvbWFpbi5jb208L2E+IHBlciBpZGVudGl0eSB2ZXJpZmljYXRpb24gcmVxdWVzdCBv\r\nbiA8YSBzdHlsZT0iY29sb3I6ICMzYTZlYTU7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsiIGhyZWY9Imh0\r\ndHA6Ly9zaXRlL3VybCI+RVhGRTwvYT4uCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8\r\nL3RyPgogICAgICAgIDwvdGFibGU+CiAgICA8L2JvZHk+CjwvaHRtbD4K\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserVerifyTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_verify", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "\\(You(twitter1@domain.com)\\) has been requested for verification by \\(Steve Exfer\\) on EXFE. Please click here to verify: \\(http://site/url/#token=recipient_twitter1_token\\)"
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetEmail(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = remail1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Content-Type: multipart/alternative; boundary=\"bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\"\nTo: =?utf-8?B?ZW1haWwxIG5hbWU=?= <to_email_address>\nFrom: =?utf-8?B?YnVzaW5lc3MgdGVzdGVy?= <x@test.com>\nSubject: =?utf-8?B?RVhGRSByZXNldCBmb3Jnb3R0ZW4gcGFzc3dvcmQ=?=\n\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/plain; charset=utf-8\nContent-Transfer-Encoding: base64\n\nSGksIFN0ZXZlIEV4ZmVyLgoKWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIgZm9yZ290dGVu\r\nIEVYRkUgcGFzc3dvcmQuCgpQbGVhc2UgY2xpY2sgaGVyZSB0byBzZXQgbmV3IHBhc3N3b3JkOiBodHRw\r\nOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaWVudF9lbWFpbDFfdG9rZW4gKFRoaXMgc2luZ2xlLXVzZSBs\r\naW5rIHdpbGwgYmUgZXhwaXJlZCBpbiAxIGRheS4pCgpUaGlzIGVtYWlsIGlzIHNlbnQgdG8gZW1haWwx\r\nQGRvbWFpbi5jb20gcGVyIGZvcmdvdCBwYXNzd29yZCByZXF1ZXN0IG9uIEVYRkUoIGh0dHA6Ly9zaXRl\r\nL3VybCApLgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60\nContent-Type: text/html; charset=utf-8\nContent-Transfer-Encoding: base64\n\nPCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAg\r\nICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNo\r\nYXJzZXQ9VVRGLTgiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHRhYmxlIGJvcmRlcj0i\r\nMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBzdHlsZT0iZm9udC1mYW1pbHk6IFZlcmRh\r\nbmE7IGZvbnQtc2l6ZTogMTRweDsgbGluZS1oZWlnaHQ6IDIwcHg7IGNvbG9yOiAjMzMzMzMzOyBmb250\r\nLXdlaWdodDogbm9ybWFsOyB3aWR0aDogNjQwcHg7IHBhZGRpbmc6IDIwcHg7IGJhY2tncm91bmQtY29s\r\nb3I6ICNmYmZiZmI7Ij4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAg\r\nICAgICAgICAgICAgIEhpLCA8c3BhbiBzdHlsZT0iY29sb3I6ICMxOTE5MTk7Ij5TdGV2ZSBFeGZlcjwv\r\nc3Bhbj4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0\r\ncj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48L3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAg\r\nICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgWW91IGp1c3QgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIg\r\nZm9yZ290dGVuIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVhNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIg\r\naHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPiBwYXNzd29yZC4KICAgICAgICAgICAgICAgIDwv\r\ndGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj48dGQgaGVpZ2h0PSIyMCI+PC90ZD48\r\nL3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAg\r\nICAgUGxlYXNlIGNsaWNrIGhlcmUgdG8gc2V0IG5ldyBwYXNzd29yZDogPGEgc3R5bGU9ImNvbG9yOiMz\r\nMzMzMzM7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsLyN0\r\nb2tlbj1yZWNpcGllbnRfZW1haWwxX3Rva2VuIj5odHRwOi8vc2l0ZS91cmwvI3Rva2VuPXJlY2lwaeKA\r\npjwvYT48YnIgLz4KICAgICAgICAgICAgICAgICAgICBUaGlzIHNpbmdsZS11c2UgbGluayB3aWxsIGJl\r\nIGV4cGlyZWQgaW4gMSBkYXkuCiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgog\r\nICAgICAgICAgICA8dHI+PHRkIGhlaWdodD0iNDAiPjwvdGQ+PC90cj4KICAgICAgICAgICAgPHRyPgog\r\nICAgICAgICAgICAgICAgPHRkIHN0eWxlPSJmb250LXNpemU6IDExcHg7IGxpbmUtaGVpZ2h0OiAxM3B4\r\nOyBjb2xvcjogIzY2NjY2NjsiPgogICAgICAgICAgICAgICAgICAgIFRoaXMgZW1haWwgaXMgc2VudCB0\r\nbyA8YSBzdHlsZT0iY29sb3I6ICM2NjY2NjY7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgZm9udC1zdHls\r\nZTogaXRhbGljOyIgaHJlZj0ibWFpbHRvOmVtYWlsMUBkb21haW4uY29tIj5lbWFpbDFAZG9tYWluLmNv\r\nbTwvYT4gcGVyIGZvcmdvdCBwYXNzd29yZCByZXF1ZXN0IG9uIDxhIHN0eWxlPSJjb2xvcjogIzNhNmVh\r\nNTsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyIgaHJlZj0iaHR0cDovL3NpdGUvdXJsIj5FWEZFPC9hPi4K\r\nICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90YWJsZT4KICAg\r\nIDwvYm9keT4KPC9odG1sPgo=\n--bf4da18faf42d84da6be65288a47b5d8ca22e5f1c8d3af179533aa734d60--\n"
	assert.Equal(t, content, expectPrivate)
}

func TestUserResetTwitter(t *testing.T) {
	arg := model.UserVerify{}
	arg.To = rtwitter1
	arg.UserName = "Steve Exfer"

	err := arg.Parse(&config)
	assert.Equal(t, err, nil)
	content, err := GetContent(localTemplate, "user_resetpass", arg.To, arg)
	assert.Equal(t, err, nil)
	t.Logf("content:---------start---------\n%s\n---------end----------", content)
	expectPrivate := "Please click here to set new password: \\(http://site/url/#token=recipient_twitter1_token\\) (This single-use link will be expired in 1 day.)"
	assert.Equal(t, content, expectPrivate)
}
